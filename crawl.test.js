import { test, expect } from '@jest/globals'
import { JSDOM } from 'jsdom'
import { normaliseURL, getURLsFromHTML } from './crawl'

// https://blog.boot.dev/path/
// https://blog.boot.dev/path
// http://blog.boot.dev/path/
// http://blog.boot.dev/path

test('normalise http://blog.boot.dev/path to equal blog.boot.dev/path', () => {
  expect(normaliseURL('http://blog.boot.dev/path')).toBe('blog.boot.dev/path')
})
test('normalise http://blog.boot.dev/path/ to equal blog.boot.dev/path', () => {
  expect(normaliseURL('http://blog.boot.dev/path/')).toBe('blog.boot.dev/path')
})
test('normalise https://blog.boot.dev/path to equal blog.boot.dev/path', () => {
  expect(normaliseURL('https://blog.boot.dev/path')).toBe('blog.boot.dev/path')
})
test('normalise https://blog.boot.dev/path/ to equal blog.boot.dev/path', () => {
  expect(normaliseURL('https://blog.boot.dev/path/')).toBe('blog.boot.dev/path')
})

// Generated by CodiumAI

describe('getURLsFromHTML', () => {
  // Extracts all URLs from anchor tags in a given HTML string
  it('should extract all URLs from HTML with multiple anchor tags', () => {
    const htmlBody =
      '<a href="http://example.com">Example</a><a href="http://test.com">Test</a>'
    const baseURL = 'http://example.com'
    const result = getURLsFromHTML(htmlBody, baseURL)
    expect(result).toEqual(['http://example.com', 'http://test.com'])
  })

  // Returns an empty array when no anchor tags are present in the HTML
  it('should return an empty array when no URLs are present in HTML', () => {
    const htmlBody = '<div>No links here</div>'
    const baseURL = 'http://example.com'
    const result = getURLsFromHTML(htmlBody, baseURL)
    expect(result).toEqual([])
  })

  it('should return absolute URLs when provided with a base URL', () => {
    const htmlBody = '<a href="/relative/path">Relative Link</a>'
    const baseURL = 'http://example.com'
    const result = getURLsFromHTML(htmlBody, baseURL)
    expect(result).toEqual(['http://example.com/relative/path'])
  })
})
